enum Chain {
  MOONRIVER
  MOONBEAM
  ASTAR
}

enum FarmType {
  STANDARD_AMM
  STABLE_AMM
  SINGLE_STAKING
}

enum FarmImplementation {
  SOLIDITY
  INK
  PALLET
}

enum Freq {
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}

type Reward {
  amount: Float!
  asset: String!
  valueUSD: Float!
  freq: String!
}

type Asset {
  symbol: String!
  address: String!
  price: Float!
  logos: [String!]!
}

type APR {
  reward: Float!
  base: Float!
}

type Farm {
  id: Int
  chef: String
  chain: String!
  protocol: String!
  farmType: String!
  farmImpl: String!
  asset: Asset!
  tvl: Float!
  apr: APR!
  rewards: [Reward!]!
  allocPoint: Int
  lastUpdatedAtUTC: String
  safetyScore: Float
}

enum XCMPTaskStatus {
  RUNNING
  CANCELLED
  FINISHED
}

enum XCMPTaskChain {
  ROCOCO
  KUSAMA
  POLKADOT
}

type XCMPTask {
  taskId: String!
  userAddress: String!
  lpName: String!
  chain: XCMPTaskChain!
  status: XCMPTaskStatus!
}

type Token {
  symbol: String!
  amount: Float!
}

enum LiquidityEventType {
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
}

enum AutocompoundEventType {
  CREATE
  UPDATE
}

type LiquidityEvent {
  userAddress: String!
  chain: XCMPTaskChain!
  token0: Token!
  token1: Token!
  lp: Token!
  timestamp: String!
  gasFee: Float! # in MGX
  eventType: LiquidityEventType!
}

type AutocompoundEvent {
  userAddress: String!
  chain: XCMPTaskChain!
  taskId: String!
  lp: Token!
  duration: Int! # in days
  frequency: Int! # in days
  timestamp: String!
  executionFee: Float! # in TUR
  xcmpFee: Float! # in TUR
  status: XCMPTaskStatus!
  eventType: AutocompoundEventType!
  percentage: Float!
}

input TokenInput {
  symbol: String!
  amount: Float!
}

type Mutation {
  createLiquidityEvent(
    userAddress: String!
    chain: XCMPTaskChain!
    token0: TokenInput!
    token1: TokenInput!
    lp: TokenInput!
    timestamp: String!
    gasFee: Float! # in MGX
    eventType: LiquidityEventType!
  ): LiquidityEvent
  createAutocompoundEvent(
    userAddress: String!
    chain: XCMPTaskChain!
    taskId: String!
    lp: TokenInput!
    duration: Int! # in days
    frequency: Int! # in days
    timestamp: String!
    executionFee: Float! # in TUR
    xcmpFee: Float! # in TUR
    status: XCMPTaskStatus!
    eventType: AutocompoundEventType!
    percentage: Float!
  ): AutocompoundEvent
  updateAutocompoundEventStatus(
    userAddress: String!
    chain: XCMPTaskChain!
    taskId: String!
    lp: TokenInput!
    newStatus: String!
  ): XCMPTaskStatus!
  addTask(
    taskId: String!
    userAddress: String!
    lpName: String!
    chain: XCMPTaskChain!
  ): XCMPTask
  updateTaskStatus(
    taskId: String!
    userAddress: String!
    lpName: String!
    chain: XCMPTaskChain!
    newStatus: String!
  ): XCMPTaskStatus!
}

type Query {
  farms(chain: String, protocol: String, chef: String, id: Int): [Farm!]!
  xcmpTasks(userAddress: String!, chain: XCMPTaskChain!): [XCMPTask!]!
  autocompoundEvents(userAddress: String!, chain: XCMPTaskChain!): [AutocompoundEvent!]!
}
