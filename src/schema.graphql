enum Chain {
  MOONRIVER
  MOONBEAM
  ASTAR
}

enum FarmType {
  STANDARD_AMM
  STABLE_AMM
  SINGLE_STAKING
}

enum FarmImplementation {
  SOLIDITY
  INK
  PALLET
}

enum Freq {
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}

type Reward {
  amount: Float!
  asset: String!
  valueUSD: Float!
  freq: String!
}

type UnderlyingAsset {
  symbol: String!
  address: String!
  decimals: Int!
}

type Asset {
  symbol: String!
  address: String!
  price: Float!
  logos: [String!]!
  underlyingAssets: [UnderlyingAsset!]!
}

type APR {
  reward: Float!
  base: Float!
}

type Farm {
  id: Int
  chef: String
  chain: String!
  protocol: String!
  router: String!
  farmType: String!
  farmImpl: String!
  asset: Asset!
  tvl: Float!
  apr: APR!
  rewards: [Reward!]!
  allocPoint: Int
  lastUpdatedAtUTC: String
  safetyScore: Float
}

enum XCMPTaskStatus {
  RUNNING
  CANCELLED
  FINISHED
}

enum XCMPTaskChain {
  ROCOCO
  KUSAMA
  POLKADOT
}

type XCMPTask {
  taskId: String!
  userAddress: String!
  lpName: String!
  chain: XCMPTaskChain!
  status: XCMPTaskStatus!
}

type Token {
  symbol: String!
  amount: Float!
}

enum LiquidityEventType {
  ADD_LIQUIDITY
  REMOVE_LIQUIDITY
}

enum AutocompoundEventType {
  CREATE
  UPDATE
}

type LiquidityEvent {
  userAddress: String!
  chain: XCMPTaskChain!
  token0: Token!
  token1: Token!
  lp: Token!
  timestamp: String!
  gasFee: Float! # in MGX
  eventType: LiquidityEventType!
}

type AutocompoundEvent {
  userAddress: String!
  chain: XCMPTaskChain!
  taskId: String!
  lp: Token!
  duration: Int! # in days
  frequency: Int! # in days
  timestamp: String!
  executionFee: Float! # in TUR
  xcmpFee: Float! # in TUR
  status: XCMPTaskStatus!
  eventType: AutocompoundEventType!
  percentage: Float!
}

input TokenInput {
  symbol: String!
  amount: Float!
}

type AutocompoundSetupEvent {
  userAddress: String!
  chain: XCMPTaskChain!
  lpName: String!
  timestamp: String!
}

type WalletConnectEvent {
  userAddress: String!
  walletType: String! # EVM or DOT
  walletProvider: String!
  timestamp: String!
}

input FarmPruned {
  id: Int
  chef: String
  chain: String!
  protocol: String!
  assetSymbol: String!
}

input Amount {
  amount: Float!
  asset: String!
  valueUSD: Float!
}

type FarmPrunedT {
  id: Int
  chef: String
  chain: String!
  protocol: String!
  assetSymbol: String!
}

type AmountT {
  amount: Float!
  asset: String!
  valueUSD: Float!
}

type AddLiquidityEvent {
  userAddress: String!
  walletType: String! # EVM or DOT
  walletProvider: String!
  timestamp: String!
  farm: FarmPrunedT!
  underlyingAmounts: [AmountT!]!
  lpAmount: AmountT!
}

type RemoveLiquidityEvent {
  userAddress: String!
  walletType: String! # EVM or DOT
  walletProvider: String!
  timestamp: String!
  farm: FarmPrunedT!
  underlyingAmounts: [AmountT!]!
  lpAmount: AmountT!
}

type StakeEvent {
  userAddress: String!
  walletType: String! # EVM or DOT
  walletProvider: String!
  timestamp: String!
  farm: FarmPrunedT!
  lpAmount: AmountT!
}

type UnstakeEvent {
  userAddress: String!
  walletType: String! # EVM or DOT
  walletProvider: String!
  timestamp: String!
  farm: FarmPrunedT!
  lpAmount: AmountT!
}

type ClaimRewardsEvent {
  userAddress: String!
  walletType: String! # EVM or DOT
  walletProvider: String!
  timestamp: String!
  farm: FarmPrunedT!
  rewards: [AmountT!]!
}

type Mutation {
  createAddLiquidityEvent(
    userAddress: String!
    walletType: String! # EVM or DOT
    walletProvider: String!
    timestamp: String!
    farm: FarmPruned!
    underlyingAmounts: [Amount!]!
    lpAmount: Amount!
  ): AddLiquidityEvent
  createRemoveLiquidityEvent(
    userAddress: String!
    walletType: String! # EVM or DOT
    walletProvider: String!
    timestamp: String!
    farm: FarmPruned!
    underlyingAmounts: [Amount!]!
    lpAmount: Amount!
  ): RemoveLiquidityEvent
  createStakeEvent(
    userAddress: String!
    walletType: String! # EVM or DOT
    walletProvider: String!
    timestamp: String!
    farm: FarmPruned!
    lpAmount: Amount!
  ): StakeEvent
  createUnstakeEvent(
    userAddress: String!
    walletType: String! # EVM or DOT
    walletProvider: String!
    timestamp: String!
    farm: FarmPruned!
    lpAmount: Amount!
  ): UnstakeEvent
  createClaimRewardsEvent(
    userAddress: String!
    walletType: String! # EVM or DOT
    walletProvider: String!
    timestamp: String!
    farm: FarmPruned!
    rewards: [Amount!]!
  ): ClaimRewardsEvent
  createWalletConnectEvent(
    userAddress: String!
    walletType: String!
    walletProvider: String!
    timestamp: String!
  ): WalletConnectEvent
  createAutocompoundSetupEvent(
    userAddress: String!
    chain: XCMPTaskChain!
    lpName: String!
    timestamp: String!
  ): AutocompoundSetupEvent
  createLiquidityEvent(
    userAddress: String!
    chain: XCMPTaskChain!
    token0: TokenInput!
    token1: TokenInput!
    lp: TokenInput!
    timestamp: String!
    gasFee: Float! # in MGX
    eventType: LiquidityEventType!
  ): LiquidityEvent
  createAutocompoundEvent(
    userAddress: String!
    chain: XCMPTaskChain!
    taskId: String!
    lp: TokenInput!
    duration: Int! # in days
    frequency: Int! # in days
    timestamp: String!
    executionFee: Float! # in TUR
    xcmpFee: Float! # in TUR
    status: XCMPTaskStatus!
    eventType: AutocompoundEventType!
    percentage: Float!
  ): AutocompoundEvent
  updateAutocompoundEventStatus(
    userAddress: String!
    chain: XCMPTaskChain!
    taskId: String!
    lp: TokenInput!
    newStatus: String!
  ): XCMPTaskStatus!
  addTask(
    taskId: String!
    userAddress: String!
    lpName: String!
    chain: XCMPTaskChain!
  ): XCMPTask
  updateTaskStatus(
    taskId: String!
    userAddress: String!
    lpName: String!
    chain: XCMPTaskChain!
    newStatus: String!
  ): XCMPTaskStatus!
}

type AssetPrice {
  chain: String!
  protocol: String!
  symbol: String!
  address: String!
  decimals: Int!
  price: Float!
  underlyingAssets: [UnderlyingAsset!]
}

input Protocol {
  chain: String!
  protocol: String!
}

type Query {
  farms(chain: String, protocol: String, chef: String, id: Int): [Farm!]!
  lpTokenPrices(protocols: [Protocol!]!): [AssetPrice!]!
  tokenPrices(protocols: [Protocol!]!): [AssetPrice!]!
  xcmpTasks(userAddress: String!, chain: XCMPTaskChain!): [XCMPTask!]!
  autocompoundEvents(
    userAddress: String!
    chain: XCMPTaskChain!
  ): [AutocompoundEvent!]!
  autocompoundSetupEvent(
    userAddress: String!
    chain: XCMPTaskChain!
    lpName: String!
    timestamp: String!
  ): AutocompoundSetupEvent
}
